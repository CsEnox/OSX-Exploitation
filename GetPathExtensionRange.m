#import <Foundation/Foundation.h> // Add this line to include Foundation framework
#include <dlfcn.h> // Add this line to include dynamic linking functions

void *lib;
typedef int (*_CFGetPathExtensionRangesFromPathComponent)(CFStringRef input, void *out1, void *out2, void *out3);
CFRange r1, r2, r3;
NSString *filename = @"test.docx.app";
_CFGetPathExtensionRangesFromPathComponent CFGetPathExtensionRangesFromPathComponent;

int main() {
    // Resolve the API method
    lib = dlopen("/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation", RTLD_LAZY);
    if (lib) {
        CFGetPathExtensionRangesFromPathComponent = (_CFGetPathExtensionRangesFromPathComponent)dlsym(lib, "_CFGetPathExtensionRangesFromPathComponent");
        if (CFGetPathExtensionRangesFromPathComponent) {
            // Call our test method with passed ranges
            CFGetPathExtensionRangesFromPathComponent((__bridge CFStringRef)(filename), &r1, &r2, &r3);

            NSLog(@"Passing filename %@", filename);
            NSLog(@"r1.Location -> %ld", r1.location);
            NSLog(@"r1.Length -> %ld", r1.length);
            NSLog(@"r2.Location -> %ld", r2.location);
            NSLog(@"r2.Length -> %ld", r2.length);

            // Grab the extension
            NSString *extension = [filename substringWithRange:NSMakeRange(r1.location, r1.length)];
            NSLog(@"Extension -> %@", extension);

            // Grab the second extension
            NSString *secondaryExtension = [filename substringWithRange:NSMakeRange(r2.location, r2.length)];
            NSLog(@"Secondary Extension -> %@", secondaryExtension);
        } else {
            NSLog(@"Error: Could not find the symbol _CFGetPathExtensionRangesFromPathComponent");
        }
        dlclose(lib); // Close the library handle when you're done
    } else {
        NSLog(@"Error: Could not open CoreFoundation framework");
    }
    return 0;
}
